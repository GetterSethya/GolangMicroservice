// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: post.proto

package postProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	IncrementReplyById(ctx context.Context, in *ReplyCountReq, opts ...grpc.CallOption) (*ReplyCountResp, error)
	DecrementReplyById(ctx context.Context, in *ReplyCountReq, opts ...grpc.CallOption) (*ReplyCountResp, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) IncrementReplyById(ctx context.Context, in *ReplyCountReq, opts ...grpc.CallOption) (*ReplyCountResp, error) {
	out := new(ReplyCountResp)
	err := c.cc.Invoke(ctx, "/postProto.Post/IncrementReplyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DecrementReplyById(ctx context.Context, in *ReplyCountReq, opts ...grpc.CallOption) (*ReplyCountResp, error) {
	out := new(ReplyCountResp)
	err := c.cc.Invoke(ctx, "/postProto.Post/DecrementReplyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	IncrementReplyById(context.Context, *ReplyCountReq) (*ReplyCountResp, error)
	DecrementReplyById(context.Context, *ReplyCountReq) (*ReplyCountResp, error)
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) IncrementReplyById(context.Context, *ReplyCountReq) (*ReplyCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementReplyById not implemented")
}
func (UnimplementedPostServer) DecrementReplyById(context.Context, *ReplyCountReq) (*ReplyCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementReplyById not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_IncrementReplyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).IncrementReplyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postProto.Post/IncrementReplyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).IncrementReplyById(ctx, req.(*ReplyCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DecrementReplyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DecrementReplyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postProto.Post/DecrementReplyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DecrementReplyById(ctx, req.(*ReplyCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postProto.Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementReplyById",
			Handler:    _Post_IncrementReplyById_Handler,
		},
		{
			MethodName: "DecrementReplyById",
			Handler:    _Post_DecrementReplyById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
